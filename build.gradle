plugins {
    id 'fabric-loom' version '1.10-SNAPSHOT'
    id 'maven-publish'
    id 'org.openjfx.javafxplugin' version '0.1.0' // Add JavaFX plugin
}

version = project.mod_version
group = project.maven_group

base {
    archivesName = project.archives_base_name
}

// Configure JavaFX modules
javafx {
    version = "21"
    modules = [ 'javafx.controls', 'javafx.base', 'javafx.graphics', 'javafx.swing' ]
}

loom {
    splitEnvironmentSourceSets()

    mods {
        "frytools" {
            sourceSet sourceSets.main
            sourceSet sourceSets.client
        }
    }
}

repositories {
    // Keep existing repositories here
}

dependencies {
    // JavaFX dependencies (client only)
    clientImplementation "org.openjfx:javafx-swing:21"
    clientImplementation "org.openjfx:javafx-base:21"
    clientImplementation "org.openjfx:javafx-controls:21"
    clientImplementation "org.openjfx:javafx-graphics:21"

    // Minecraft and Fabric dependencies
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
}

// Add this to ensure client source set can access main source set
sourceSets {
    client {
        compileClasspath += main.output
        runtimeClasspath += main.output
    }
}

// Rest of the file remains the same...
processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": project.minecraft_version,
                "loader_version": project.loader_version
    }
}

def targetJavaVersion = 21
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release.set(targetJavaVersion)
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

publishing {
    publications {
        create("mavenJava", MavenPublication) {
            artifactId = project.archives_base_name
            from components.java
        }
    }
    repositories {
        // Repository config
    }
}